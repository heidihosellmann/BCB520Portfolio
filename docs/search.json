[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is my first post in a Quarto blog. Welcome!\n\nThis photo was a default addition, but I love coffee a latte so I am leaving it."
  },
  {
    "objectID": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html",
    "href": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html",
    "title": "NETWORKS IN OBSERVABLE",
    "section": "",
    "text": "This is all from Barrie’s post on the topic!"
  },
  {
    "objectID": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#example-1-basic-force-directed-graph",
    "href": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#example-1-basic-force-directed-graph",
    "title": "NETWORKS IN OBSERVABLE",
    "section": "EXAMPLE 1: BASIC FORCE DIRECTED GRAPH",
    "text": "EXAMPLE 1: BASIC FORCE DIRECTED GRAPH\nI’m going to start by trying to replicate this observable notebook:\n\n\nCode\nviewof graph = {\n  const form = html`&lt;form style=\"font: 12px var(--sans-serif); display: flex; height: 33px; align-items: center;\"&gt;\n  &lt;label style=\"margin-right: 1em; display: inline-flex; align-items: center;\"&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"1\" style=\"margin-right: 0.5em;\" checked&gt; Graph 1\n  &lt;/label&gt;\n  &lt;label style=\"margin-right: 1em; display: inline-flex; align-items: center;\"&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"2\" style=\"margin-right: 0.5em;\"&gt; Graph 2\n  &lt;/label&gt;\n  &lt;label style=\"margin-right: 1em; display: inline-flex; align-items: center;\"&gt;\n    &lt;input type=\"radio\" name=\"radio\" value=\"3\" style=\"margin-right: 0.5em;\"&gt; Graph 3\n  &lt;/label&gt;\n&lt;/form&gt;`;\n  const graphs = {1: graph1, 2: graph2, 3: graph3};\n  const timeout = setInterval(() =&gt; {\n    form.value = graphs[form.radio.value = (+form.radio.value) % 3 + 1];\n    form.dispatchEvent(new CustomEvent(\"input\"));\n  }, 2000);\n  form.onchange = () =&gt; form.dispatchEvent(new CustomEvent(\"input\")); // Safari\n  form.oninput = event =&gt; { \n    if (event.isTrusted) clearInterval(timeout), form.onchange = null;\n    form.value = graphs[form.radio.value];\n  };\n  form.value = graphs[form.radio.value];\n  invalidation.then(() =&gt; clearInterval(timeout));\n  return form;\n}\n\n\n\n\nchart2 = {\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n\n  const simulation = d3.forceSimulation()\n      .force(\"charge\", d3.forceManyBody().strength(-1000))\n      .force(\"link\", d3.forceLink().id(d =&gt; d.id).distance(200))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n  let link = svg.append(\"g\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"line\");\n\n  let node = svg.append(\"g\")\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1.5)\n    .selectAll(\"circle\");\n\n  function ticked() {\n    node.attr(\"cx\", d =&gt; d.x)\n        .attr(\"cy\", d =&gt; d.y)\n\n    link.attr(\"x1\", d =&gt; d.source.x)\n        .attr(\"y1\", d =&gt; d.source.y)\n        .attr(\"x2\", d =&gt; d.target.x)\n        .attr(\"y2\", d =&gt; d.target.y);\n  }\n\n  // Terminate the force layout when this cell re-runs.\n  invalidation.then(() =&gt; simulation.stop());\n\n  return Object.assign(svg.node(), {\n    update({nodes, links}) {\n\n      // Make a shallow copy to protect against mutation, while\n      // recycling old nodes to preserve position and velocity.\n      const old = new Map(node.data().map(d =&gt; [d.id, d]));\n      nodes = nodes.map(d =&gt; Object.assign(old.get(d.id) || {}, d));\n      links = links.map(d =&gt; Object.assign({}, d));\n\n      simulation.nodes(nodes);\n      simulation.force(\"link\").links(links);\n      simulation.alpha(1).restart();\n\n      node = node\n        .data(nodes, d =&gt; d.id)\n        .join(enter =&gt; enter.append(\"circle\")\n          .attr(\"r\", 8)\n          .attr(\"fill\", d =&gt; color(d.id)));\n\n      link = link\n        .data(links, d =&gt; `${d.source.id}\\t${d.target.id}`)\n        .join(\"line\");\n    }\n  });\n}\n\n\nupdate = chart2.update(graph)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below shows us how Dr. Bostock creates the basic architecture of an EDGE LIST called links along with NODE LABELS called nodes. Have a close look at the structure. He is setting this up in a heirarchy very similar to a JSON file, which we will examine in EXAMPLE 2.\n\n\nCode\ngraph1 = ({\n  nodes: [\n    {id: \"a\"},\n    {id: \"b\"},\n    {id: \"c\"}\n  ],\n  links: []\n})\n\n\ngraph2 = ({\n  nodes: [\n    {id: \"Life Sciences\"},\n    {id: \"Physical Sciences\"},\n    {id: \"Konrad\"},\n    {id: \"Robyn\"},\n    {id: \"Geraline\"},\n    {id: \"Lucas\"},\n    {id: \"Yaotian\"},\n    {id: \"Barrie\"},\n    {id: \"Heidi\"}\n  ],\n  links: [\n    {source: \"Barrie\", target: \"Konrad\"},\n    {source: \"Barrie\", target: \"Robyn\"},\n    {source: \"Barrie\", target: \"Geraline\"},\n    {source: \"Barrie\", target: \"Lucas\"},\n    {source: \"Barrie\", target: \"Yaotian\"},\n    {source: \"Barrie\", target: \"Heidi\"},\n    {source: \"Barrie\", target: \"Life Sciences\"},\n    {source: \"Geraline\", target: \"Life Sciences\"},\n    {source: \"Lucas\", target: \"Life Sciences\"},\n    {source: \"Yaotian\", target: \"Life Sciences\"},\n    {source: \"Heidi\", target: \"Life Sciences\"},\n    {source: \"Konrad\", target: \"Physical Sciences\"},\n    {source: \"Robyn\", target: \"Physical Sciences\"}\n  ]\n})\n\n\ngraph3 = ({\n  nodes: [\n    {id: \"a\"},\n    {id: \"b\"}\n  ],\n  links: [\n    {source: \"a\", target: \"b\"}\n  ]\n})\n\n\ncolor = d3.scaleOrdinal(d3.schemeTableau10)\n\nheight = 400"
  },
  {
    "objectID": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#task-1",
    "href": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#task-1",
    "title": "NETWORKS IN OBSERVABLE",
    "section": "TASK 1",
    "text": "TASK 1\nChange the graph3 object so that it contains eight nodes called “Life Sciences”, “Physical Sciences”, “Heidi”, “Robyn”, “Konrad”, “Geraline”, “Lucas”, and “Yaotian”. Change the links object to reflect our shared understanding of those links.\nI did this, but modified graph 2 instead. My bad, but still cool!"
  },
  {
    "objectID": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#example-2-interactive-force-directed-graph",
    "href": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#example-2-interactive-force-directed-graph",
    "title": "NETWORKS IN OBSERVABLE",
    "section": "EXAMPLE 2: INTERACTIVE FORCE DIRECTED GRAPH",
    "text": "EXAMPLE 2: INTERACTIVE FORCE DIRECTED GRAPH\nI honestly cannot believe this works! I mean… Hey! Look at this cool interactive network!\n\n\nCode\nchart = ForceGraph(miserables, {\n  nodeId: d =&gt; d.id,\n  nodeGroup: d =&gt; d.group,\n  nodeTitle: d =&gt; `${d.id}\\n${d.group}`,\n  linkStrokeWidth: l =&gt; Math.sqrt(l.value),\n  width,\n  height: 600,\n  invalidation // a promise to stop the simulation when the cell is re-run\n})\n\n\n\n\n\n\n\n\nJSON - Abandon All Hope Ye Who Enter Here\nThe first line of code in the chunk below defines the data object from a .json file called miserables.json. Have a look at this file within RStudio. Does the overall structure look familiar?\nCould we possibly replace the stupid data file about a stupid musical with something of our own design???\n\n\nCode\nmiserables = FileAttachment(\"miserables.json\").json()\n\n\n// Copyright 2021 Observable, Inc.\n// Released under the ISC license.\n// https://observablehq.com/@d3/force-directed-graph\nfunction ForceGraph({\n  nodes, // an iterable of node objects (typically [{id}, …])\n  links // an iterable of link objects (typically [{source, target}, …])\n}, {\n  nodeId = d =&gt; d.id, // given d in nodes, returns a unique identifier (string)\n  nodeGroup, // given d in nodes, returns an (ordinal) value for color\n  nodeGroups, // an array of ordinal values representing the node groups\n  nodeTitle, // given d in nodes, a title string\n  nodeFill = \"currentColor\", // node stroke fill (if not using a group color encoding)\n  nodeStroke = \"#fff\", // node stroke color\n  nodeStrokeWidth = 1.5, // node stroke width, in pixels\n  nodeStrokeOpacity = 1, // node stroke opacity\n  nodeRadius = 5, // node radius, in pixels\n  nodeStrength,\n  linkSource = ({source}) =&gt; source, // given d in links, returns a node identifier string\n  linkTarget = ({target}) =&gt; target, // given d in links, returns a node identifier string\n  linkStroke = \"#999\", // link stroke color\n  linkStrokeOpacity = 0.6, // link stroke opacity\n  linkStrokeWidth = 1.5, // given d in links, returns a stroke width in pixels\n  linkStrokeLinecap = \"round\", // link stroke linecap\n  linkStrength,\n  colors = d3.schemeTableau10, // an array of color strings, for the node groups\n  width = 640, // outer width, in pixels\n  height = 400, // outer height, in pixels\n  invalidation // when this promise resolves, stop the simulation\n} = {}) {\n  // Compute values.\n  const N = d3.map(nodes, nodeId).map(intern);\n  const LS = d3.map(links, linkSource).map(intern);\n  const LT = d3.map(links, linkTarget).map(intern);\n  if (nodeTitle === undefined) nodeTitle = (_, i) =&gt; N[i];\n  const T = nodeTitle == null ? null : d3.map(nodes, nodeTitle);\n  const G = nodeGroup == null ? null : d3.map(nodes, nodeGroup).map(intern);\n  const W = typeof linkStrokeWidth !== \"function\" ? null : d3.map(links, linkStrokeWidth);\n  const L = typeof linkStroke !== \"function\" ? null : d3.map(links, linkStroke);\n\n  // Replace the input nodes and links with mutable objects for the simulation.\n  nodes = d3.map(nodes, (_, i) =&gt; ({id: N[i]}));\n  links = d3.map(links, (_, i) =&gt; ({source: LS[i], target: LT[i]}));\n\n  // Compute default domains.\n  if (G && nodeGroups === undefined) nodeGroups = d3.sort(G);\n\n  // Construct the scales.\n  const color = nodeGroup == null ? null : d3.scaleOrdinal(nodeGroups, colors);\n\n  // Construct the forces.\n  const forceNode = d3.forceManyBody();\n  const forceLink = d3.forceLink(links).id(({index: i}) =&gt; N[i]);\n  if (nodeStrength !== undefined) forceNode.strength(nodeStrength);\n  if (linkStrength !== undefined) forceLink.strength(linkStrength);\n\n  const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", forceLink)\n      .force(\"charge\", forceNode)\n      .force(\"center\",  d3.forceCenter())\n      .on(\"tick\", ticked);\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n  const link = svg.append(\"g\")\n      .attr(\"stroke\", typeof linkStroke !== \"function\" ? linkStroke : null)\n      .attr(\"stroke-opacity\", linkStrokeOpacity)\n      .attr(\"stroke-width\", typeof linkStrokeWidth !== \"function\" ? linkStrokeWidth : null)\n      .attr(\"stroke-linecap\", linkStrokeLinecap)\n    .selectAll(\"line\")\n    .data(links)\n    .join(\"line\");\n\n  const node = svg.append(\"g\")\n      .attr(\"fill\", nodeFill)\n      .attr(\"stroke\", nodeStroke)\n      .attr(\"stroke-opacity\", nodeStrokeOpacity)\n      .attr(\"stroke-width\", nodeStrokeWidth)\n    .selectAll(\"circle\")\n    .data(nodes)\n    .join(\"circle\")\n      .attr(\"r\", nodeRadius)\n      .call(drag(simulation));\n\n  if (W) link.attr(\"stroke-width\", ({index: i}) =&gt; W[i]);\n  if (L) link.attr(\"stroke\", ({index: i}) =&gt; L[i]);\n  if (G) node.attr(\"fill\", ({index: i}) =&gt; color(G[i]));\n  if (T) node.append(\"title\").text(({index: i}) =&gt; T[i]);\n  if (invalidation != null) invalidation.then(() =&gt; simulation.stop());\n\n  function intern(value) {\n    return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n  }\n\n  function ticked() {\n    link\n      .attr(\"x1\", d =&gt; d.source.x)\n      .attr(\"y1\", d =&gt; d.source.y)\n      .attr(\"x2\", d =&gt; d.target.x)\n      .attr(\"y2\", d =&gt; d.target.y);\n\n    node\n      .attr(\"cx\", d =&gt; d.x)\n      .attr(\"cy\", d =&gt; d.y);\n  }\n\n  function drag(simulation) {    \n    function dragstarted(event) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      event.subject.fx = event.subject.x;\n      event.subject.fy = event.subject.y;\n    }\n    \n    function dragged(event) {\n      event.subject.fx = event.x;\n      event.subject.fy = event.y;\n    }\n    \n    function dragended(event) {\n      if (!event.active) simulation.alphaTarget(0);\n      event.subject.fx = null;\n      event.subject.fy = null;\n    }\n    \n    return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n  }\n\n  return Object.assign(svg.node(), {scales: {color}});\n}\n\n\nimport {howto} from \"@d3/example-components\"\n\nimport {Swatches} from \"@d3/color-legend\""
  },
  {
    "objectID": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#task-2",
    "href": "posts/Assignment 8 Networks in Observable/Assignment 8 Networks in Observable.html#task-2",
    "title": "NETWORKS IN OBSERVABLE",
    "section": "TASK 2",
    "text": "TASK 2\nWhat if we replaced the datafile by making our own json file??\n\n\nCode\nlibrary(jsonlite)\n\n\nWarning: package 'jsonlite' was built under R version 4.3.2\n\n\nCode\n# create data frames for nodes and links\nnodes &lt;- data.frame(\n  id = c(\"Barrie\", \"Ronald\", \"Cody\", \"Erick\", \"Jiyin\", \"Cthulhu\"),\n  group = c(1, 1, 1 , 2, 2, 3)\n)\n\nlinks &lt;- data.frame(\n  source = c(\"Barrie\", \"Ronald\", \"Cody\", \"Barrie\", \"Erick\", \"Jiyin\", \"Ronald\"),\n  target = c(\"Cthulhu\", \"Erick\", \"Jiyin\", \"Erick\", \"Cthulhu\", \"Ronald\", \"Cody\"),\n  value = c(1, 8, 10, 6, 1, 1, 1)\n)\n\n# convert data frames to JSON objects\nnodes_json &lt;- toJSON(list(nodes = nodes), pretty = TRUE)\nlinks_json &lt;- toJSON(list(links = links), pretty = TRUE)\n\n# merge JSON objects into one\njson &lt;- paste0( nodes_json, links_json)\n\n# write JSON object to file\nwrite(json, file = \"network_graph2.json\")\n\n\nNow go back and point the stuff to the stuff…\nAnyway…. here is where I want to go:\nAMAZING"
  },
  {
    "objectID": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html",
    "href": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "",
    "text": "Codeknitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE)"
  },
  {
    "objectID": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#putting-all-the-active-awards-from-various-sponsors-together",
    "href": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#putting-all-the-active-awards-from-various-sponsors-together",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Putting all the active awards from various sponsors together",
    "text": "Putting all the active awards from various sponsors together\n\n\nQuestion1Visualization\n\nFigure 3. This figure shows U of I PI last names and their active grants they have received as of 2017. The bars are colored by sponsor and the text amount signifies the amount they have received for said award. The USDA data is not included due to a lack of necessary variables. The strengths of this figure is that it displays, rather than over plots, PIs who have multiple awards. Limitations are that this figure only includes grants that have started in 2017 and on."
  },
  {
    "objectID": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#putting-all-the-sponsors-together",
    "href": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#putting-all-the-sponsors-together",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Putting all the sponsors together",
    "text": "Putting all the sponsors together\n\n\n\n\n\nFigure 5. This figure shows the approximate trends of new grants received by the University of Idaho from various sponsors in the last 10 years.\nLimitations include that the USDA data set did not have specifications denoting whether the awards were new or continuing, therefore, I was only able to go off the award date for being in the last 10 years and had to make the assumption all were new. This is most likely not the case, so the orange line should be interpreted with caution. In general, the USDA actually seems to be on the decline, which would be concerning given the type of school the University of Idaho is. As for the DOE, it seems we are on the rise during the past couple years. The NSF seems to be steady at the moment. Meanwhile, the NIH data was interesting. Upon updating this document, grants considered “new” a week previously were not considered “new” anymore. Therefore, I just included all grants from the past 10 years. All in all, this is an interesting figure to address general trends within the last decade."
  },
  {
    "objectID": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#combining-nih-and-nsf-for-neighboring-schools",
    "href": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#combining-nih-and-nsf-for-neighboring-schools",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Combining NIH and NSF for neighboring schools",
    "text": "Combining NIH and NSF for neighboring schools\n\n\n\n\n\nFigure 6. This figure shows the award amounts of the active grants of each institution (and their various locations) sponsored by the NIH (coral) and NSF (blue).\nI used the measures of active awards and their relative amounts from these sponsors to address how the U of I compares to neighboring institutions. Although not complex, these performance attributes capture important metrics nonetheless.\nThe limitations of this figure are first and foremost that it only addresses grants from the NIH and NSF, not the USDA and DOE. I chose to do this out of sake for convenience. Also, for the NIH, this time I added the indirect and direct costs to compute the award amount (in Figure 1., I only used direct cost). Further, because of the discrepant data sources, some of the institutions have multiple locations also shown in this figure. Although I could agglomerate the data so each institution has one reference point, I actually think this may be insightful to see how the smaller institutions compare to the larger ones. In general, I could clean this figure up to look a little nicer.\nAll in all, from this figure, we can see the U of I compares well in the realm of NSF grants. This is not so much the case for the NIH grants."
  },
  {
    "objectID": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#data-dictionary",
    "href": "posts/Assignment 6 Midterm/Assignment 6 Midterm.html#data-dictionary",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Data Dictionary",
    "text": "Data Dictionary\n\n\n\n\n\n\n\n\n\nAttribute\nDescription\nType\n\n\n\nAward Date\nDate when award was granted\nOrdinal\n\n\nGrant Number\nUnique ID for each grant\nItem\n\n\nProposal Number\nN/A for all\nNA\n\n\nGrant Title\nN/A for all\nNA\n\n\nState Name\nState of award (all = IDAHO)\nCategorical\n\n\nGrantee Name\nTells who received the grant (all = U of I)\nCategorical\n\n\nAward Dollars\nAward amount\nQuantitative\n\n\nProgram Name\nName of program grant will be used for (some are N/A)\nCategorical\n\n\nProgram Area Name\nName of program (some have N/A)\nCategorical\n\n\n\nFigure 1: USDAtoUI Data Dictionary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttribute\nDescription\nType…3\n…4\n…5\n…6\nType…7\n\n\n\nAward Number\nID of award\nItem\nNA\nNA\nNA\nOrdinal\n\n\nTitle\nTitle of award\nItem\nNA\nNA\nNA\nItem\n\n\nInstitution\nOrganization to whom award was granted. Some are universities, but others are companies and laboratories (many are included, not just U of I)\nItem\nNA\nNA\nNA\nOrdinal\n\n\nCity\nCity of that organization (many- not restricted to Moscow)\nItem\nNA\nNA\nNA\nOrdinal\n\n\nState\nState of that organization (many, not restricted to ID)\nItem\nNA\nNA\nNA\nOrdinal\n\n\nZip Code\nZipcode of that organization\nItem\nNA\nNA\nNA\nQuantitative\n\n\nPI\nPrinciple Investigator to whom award was granted\nItem\nNA\nNA\nNA\nQuantitative\n\n\nStatus\nTells if award is ongoing or not (seems that only active/current awards are included in this data set)\nCategorical\nNA\nNA\nNA\nCategorical\n\n\nAction Type\nTells if the award is new or a renewal\nCategorical\nNA\nNA\nNA\nItem\n\n\nOrg Code\nUnique code for the award\nItem\nNA\nNA\nNA\nOrdinal\n\n\nSBIR/STTR\nTells if the awards are SBIR (Small Business Innovation Research) or STTR (Small Business Technology Transfer) programs. Neither = N/A\nCategorical\nNA\nNA\nNA\nQuantitative\n\n\nProgram Office\nTells what DOE program office oversees the award\nCategorical\nNA\nNA\nNA\nNA\n\n\nAward Type\nTells type of award (grant, interagency agreement, cooperative agreement)\nCategorical\nNA\nNA\nNA\nNA\n\n\nPM\nProject Manager (appear to be different people than PI)\nItem\nNA\nNA\nNA\nNA\n\n\nStart Date\nAward start date\nOrdinal\nNA\nNA\nNA\nNA\n\n\nEnd Date\nAward end date\nOrdinal\nNA\nNA\nNA\nNA\n\n\nSBIR Phase\nIf applicable, phase of SBIR\nCategorical\nNA\nNA\nNA\nNA\n\n\nMost Recent Award Date\nDate of most recent award\nOrdinal\nNA\nNA\nNA\nNA\n\n\nAmount Awarded to Date\nMoney given as of most recent award date\nQuantitative\nNA\nNA\nNA\nNA\n\n\nAmount Awarded this FY\nAmount awarded this fiscal year\nNA\nNA\nNA\nNA\nNA\n\n\nProgram Area\nWhat type of program the award will be used towards\nItem\nNA\nNA\nNA\nNA\n\n\nRegister Number\nUnique code for the award\nItem\nNA\nNA\nNA\nNA\n\n\nUEI\nUnique code for the award\nItem\nNA\nNA\nNA\nNA\n\n\nDUNS\nUnique code for the award\nItem\nNA\nNA\nNA\nNA\n\n\nInstitution Type\nType of institution that has received the award\nCategorical\nNA\nNA\nNA\nNA\n\n\nAbstract\nAbstract of what award is proposed to be used for\nItem\nNA\nNA\nNA\nNA\n\n\n\nFigure 2: DOE Data Dictionary\n\n\n\n\n\n\n\n\n\n\n\nAttribute\nDescription\nType\n\n\n\nappl id\nUnique ID\nItem\n\n\nsubproject id\nSome awards have subproject unique ID values\nItem\n\n\nfiscal year\nYear of award\nOrdinal\n\n\nproject num\nProject number (seems to be a grouping variable)\nCategorical\n\n\nproject serial num\nProject number (seems to be a grouping variable)\nCategorical\n\n\naward type\nType of award (1, 2, 3, 4, 4N, 5)\nCategorical\n\n\nactivity code\nCode for award\nCategorical\n\n\naward amount\nAmount alloted for award\nQuantitative\n\n\nis active\nTells whether the award is ongoing or not (TRUE/FALSE)\nCategorical\n\n\nprincipal investigators\nNo values\nNA\n\n\ncontact pi name\nNames of PIs\nItem\n\n\nprogram officers\nNo values\nNA\n\n\nagency ic fundings\nNo values/unsure\nNA\n\n\ncong dist\nAppears to be a subset of code for awards\nCategorical\n\n\nspending categories\nNo values\nNA\n\n\nproject start date\nStart date\nOrdinal\n\n\nproject end date\nEnd date\nOrdinal\n\n\nopportunity number\nAppears to be a subset of code for awards\nCategorical\n\n\naward notice date\nDate of notification of award\nOrdinal\n\n\nis new\nTells whether the award is new or not (TRUE/FALSE)\nCategorical\n\n\nmechanism code dc\nCode for mechanism\nCategorical\n\n\ncore project num\nID for award\nItem\n\n\nterms\nKeywords grant proposes to address with award\nItem\n\n\npref terms\nPreferred keywords\nItem\n\n\nabstract text\nAbstract\nItem\n\n\nproject title\nTitle of project\nItem\n\n\nphr text\nSome awards have project narrative text\nItem\n\n\nspending categories desc\nSome awards have spending categories\nItem\n\n\nagency code\nAll = NIH\nCategorical\n\n\ncovid response\nNo values/unsure\nNA\n\n\narra funded\nAll = N\nCategorical\n\n\nbudget start\nStart date of budget\nOrdinal\n\n\nbudget end\nEnd date of budget\nOrdinal\n\n\ncfda code\nNumber assigned in the awarding document funded by the Federal government (similar to NSF)\nItem\n\n\nfunding mechanism\nMechanism for funding (similar to DOE)\nCategorical\n\n\ndirect cost amt\nCost directly of award\nQuantitative\n\n\nindirect cost amt\nCost indirectly of award\nQuantitative\n\n\nproject detail url\nWebsite of project details\nItem\n\n\ndate added\nDate award added\nOrdinal\n\n\norganization org name\nOrganization of awardee (either U of I or BSU)\nCategorical\n\n\norganization city\nNo values/unsure\nNA\n\n\norganization country\nNo values/unsure\nNA\n\n\norganization org city\nCity of University (either Moscow or Boise)\nCategorical\n\n\norganization org country\nCountry = USA\nCategorical\n\n\norganization org state\nState = ID\nCategorical\n\n\norganization org state name\nNo values\nNA\n\n\norganization dept type\nDepartment type being awarded (some have)\nCategorical\n\n\norganization fips country code\nNo values\nNA\n\n\norganization org duns\nNo values\nNA\n\n\norganization org ueis\nNo values\nNA\n\n\norganization primary duns\nSeems to be some grouping variable\nCategorical\n\n\norganization primary uei\nSeems to be some grouping variable\nCategorical\n\n\norganization org fips\nAll = US\nCategorical\n\n\norganization org ipf code\nSeems to be some grouping variable\nCategorical\n\n\norganization org zipcode\nZipcode of organization\nCategorical\n\n\norganization external org id\nSeems to be some grouping variable\nCategorical\n\n\nproject num split appl type code\nSeems to be values 1-10\nCategorical\n\n\nproject num split activity code\nSeems to be some grouping variable\nCategorical\n\n\nproject num split ic code\nSeems to be some grouping variable\nCategorical\n\n\nproject num split serial num\nSeems to be some grouping variable\nCategorical\n\n\nproject num split support year\nNot sure\nCategorical\n\n\nproject num split full support year\nSimilar to previous\nCategorical\n\n\nproject num split suffix code\nNot sure (only some values have)\nCategorical\n\n\nagency ic admin code\nAppears to be the same as project_num_split.ic_code\nCategorical\n\n\nagency ic admin abbreviation\nSome sort of abbreviation\nCategorical\n\n\nagency ic admin name\nAgency name (health related)\nCategorical\n\n\norganization type name\nType of organization\nCategorical\n\n\norganization type code\nAll = 10\nCategorical\n\n\norganization type is other\nExtends organization type (TRUE/FALSE)\nCategorical\n\n\nfull study section srg code\nSeems to be some grouping variable\nCategorical\n\n\nfull study section srg flex\nUnsure (only some values have)\nCategorical\n\n\nfull study section sra designator code\nSome sort of grouping variable code\nCategorical\n\n\nfull study section sra flex code\nUnsure (some have letters, some numbers)\nCategorical\n\n\nfull study section group code\nSome sort of grouping code\nCategorical\n\n\nfull study section name\nSection name\nCategorical\n\n\n\nFigure 3: project_df Data Dictionary\n\n\n\n\n\n\n\n\n\n\n\nAttribute\nDescription\nType\n\n\n\nabstractText\nText of abstract\nItem\n\n\nagency\nAgency awarding (for all = NSF)\nCategorical\n\n\nawardAgencyCode\nAll NSF codes appear to be 4900\nCategorical\n\n\nawardeeAddress\nAddress of awardee (all of these = U of I)\nItem\n\n\nawardeeCity\nCity of awardee\nItem\n\n\nawardeeCountryCode\nCountry of awardee\nItem\n\n\nawardeeDistrictCode\nDistrict code of awardee (all = ID01)\nCategorical\n\n\nawardeeName\nName of awardee (all = Regents of U of I)\nItem\n\n\nawardeeStateCode\nState of awardee\nItem\n\n\nawardeeZipCode\nZip code of awardee\nItem\n\n\ncfdaNumber\nNumber assigned in the awarding document funded by the Federal government\nItem\n\n\ncoPDPI\nUnsure/no values\nNA\n\n\nueiNumber\nCode given to U of I awards (all are the same in this data set)\nItem\n\n\nestimatedTotalAmt\nEstimated total amount of award\nQuantitative\n\n\nfundsObligatedAmt\nAmount NSF is obligated to give\nQuantitative\n\n\nfundAgencyCode\nSame code as above awardAgencyCode\nCategorical\n\n\nfundProgramName\nVarious program names\nItem\n\n\nid\nUnique ID for each award\nItem\n\n\nparentUeiNumber\nUnsure/no values\nNA\n\n\npdPIName\nPrinciple Investigator\nItem\n\n\nperfAddress\nPreferred address of awardee (most are U of I, some elsewhere)\nItem\n\n\nperfCity\nPreferred city\nItem\n\n\nperfCountryCode\nPreferred country code\nItem\n\n\nperfDistrictCode\nPreferred discrict code\nItem\n\n\nperfLocation\nPreferred location (some prefer elsewhere- like Idaho Falls)\nItem\n\n\nperfStateCode\nPreferred state code\nItem\n\n\nperfZipCode\nPreferred zip code\nItem\n\n\npiEmail\nEmail of PI\nItem\n\n\npiFirstName\nFirst name of PI\nItem\n\n\npiLastName\nLast name of PI\nItem\n\n\npiMiddeInitial\nMiddle initial of PI\nItem\n\n\npoEmail\nEmail of Program Officer\nItem\n\n\npoName\nName of Program Officer\nItem\n\n\npoPhone\nPhone of PO\nItem\n\n\nprimaryProgram\nUnsure/no values\nNA\n\n\ndate\nCurrent data?\nOrdinal\n\n\nstartDate\nStart date of award\nOrdinal\n\n\nexpDate\nEnd data of award\nOrdinal\n\n\ntitle\nTitle of award\nItem\n\n\ntransType\nType of grant (continuing, standard, fellowship…)\nCategorical\n\n\nawardee\nAgain, here = regents of U of I for all\nItem\n\n\npublicationResearch\nUnsure/no values\nNA\n\n\nprojectOutComesReport\nSome have a snippet on the findings thus far\nItem\n\n\n\nFigure 4: NSF to UI Data Dictionary"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html",
    "href": "posts/Assignment 4/Assignment4.html",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPig\nIL1B_Jej_pg_mL\nIL1B_Ile_pg_mL\nIL1B_Col_pg_mL\nTNFA_Jej_pg_mL\nTNFA_Ile_pg_mL\nTNFA_Col_pg_mL\nIL8_Jej_pg_mL\nIL8_Ile_pg_mL\nIL8_Col_pg_mL\n\n\n\n\nP1\n158.107\n258.529\n18.902\n10.084\n191.685\n67.410\n2717.095\n3244.064\n48.389\n\n\nC1\n304.570\n300.510\n173.388\n5.293\n148.321\n53.500\n1807.191\n2747.520\n521.019\n\n\nHM1\n126.749\n92.684\n80.020\n0.000\n163.895\n0.000\n2163.072\n1842.670\n93.936\n\n\nHM2\n90.214\n72.580\n75.545\n0.000\n130.676\n0.000\n3434.170\n3433.543\n194.084\n\n\nHM3\n114.224\n79.751\n239.901\n0.000\n0.000\n28.050\n1649.797\n1678.069\n334.678\n\n\nHM4\n132.318\n107.964\n155.655\n3.612\n5.265\n18.105\n3390.124\n3088.125\n373.427\n\n\nHM5\n68.657\n49.695\n12.045\n0.000\n112.351\n0.000\n3148.633\n3153.588\n172.843\n\n\nHM6\n112.428\n57.860\n52.582\n0.000\n0.000\n0.000\n3088.206\n4084.593\n183.157\n\n\nP2\n194.675\n145.165\n63.666\n12.729\n18.287\n89.610\n2474.794\n2692.826\n880.425\n\n\nC2\n401.575\n564.465\n305.068\n42.442\n17.261\n84.509\n1635.162\n1030.576\n255.938\n\n\nIF1\n174.037\n130.035\n38.956\n0.000\n105.243\n3.978\n2013.397\n1678.351\n49.232\n\n\nIF2\n126.663\n115.666\n76.857\n0.000\n63.294\n4.975\n3399.788\n1727.786\n116.573\n\n\nIF3\n141.120\n53.064\n182.891\n4.574\n0.000\n12.948\n3766.222\n504.454\n38.554\n\n\nIF4\n132.275\n78.283\n18.266\n9.628\n154.257\n0.000\n3705.406\n2293.403\n222.193\n\n\nIF5\n111.800\n91.316\n82.741\n0.000\n223.890\n4.293\n3228.713\n2499.064\n103.378\n\n\nIF6\n159.411\n120.352\n31.099\n0.000\n5.171\n0.000\n2001.489\n2659.008\n173.974\n\n\n\n\n\nI am adding in my DATA DICTIONARY from Assignment 2:\n\n\n\n\n\nJust one excel sheet with items and attributes.\n\n\n\nIn Cytokine_summary, there are 16 pigs. P1 and P2 were pilot pigs fed piglet milk replacer formula. C1 and C2 were farm control pigs (siblings) raised at a farm (the same one as the other pigs), feeding from their own mom, and then we received them for necropsy on day of life (DOL) 28. HM1-6 were fed human milk for 28 days in our lab. IF1-6 were fed infant formula for 28 days in our lab. Pairs of HM and IF (such as HM1 and IF1) were siblings and both raised at the same time, but in different cages.\n\n\n\nIn Cytokine_summary, there are 10 variables. One of these columns = “Pigs” and specifies the observations described above. All other variables are cytokine values from ELISAs on various intestinal tissues harvested fromt the pigs at necropsy on DOL 28 (except HM/IF5- they had to stay with us a little longer). Detected ELISAs tested included IL1B, TNFA, and IL8. Each of these cytokines were tested on the jejunum (Jej), ileum (Ile), and Colon (Col) of each pig. Concentration units of for each measurement were in pg/mL.\n\n\n\n\nNow that I have the necessary data and packages, I want to make a box blot distribution of my various cytokines per pig feeding group - HM, IF, P, and C. Barrie helped me with this!\n\n\n\nHere we add another column into Cytokine_summary via R\n\n\n\n\n\n\n\n\nFigure 1. Box and whisker plots displaying piglet diet group differences in expression levels (pg/mL) of the pro-inflammatory cytokine IL1B in the jejunum. Jitter overlay is representative of each individual pig.\n\n\nC = Farm Control\nHM = HM\nIF = IF\nP = Lab Control\nNow I could create individual ones of these for each column… but we are going to try to work smarter, not harder, and create a new data frame to get all these types of plots into 1 figure.\n\n\n\n\nFirst we break up the columns 2-10 to their cytokine and their region.\nCytokine_long looks good!\nNow to put that into a boxplot with jitter overlay. We facet_wrapped in order to make subplots from 1 plot (slice it up for the viewers).\n\n\n\n\n\nFigure 2. Box and whisker plots displaying piglet diet group differences in expression levels (pg/mL) of the pro-inflammatory cytokines IL1B, IL8, and TNFA in the jejunum, ileum, and colon. Jitter overlay is representative of each individual pig.\nGreat!"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#import-data",
    "href": "posts/Assignment 4/Assignment4.html#import-data",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "Pig\nIL1B_Jej_pg_mL\nIL1B_Ile_pg_mL\nIL1B_Col_pg_mL\nTNFA_Jej_pg_mL\nTNFA_Ile_pg_mL\nTNFA_Col_pg_mL\nIL8_Jej_pg_mL\nIL8_Ile_pg_mL\nIL8_Col_pg_mL\n\n\n\n\nP1\n158.107\n258.529\n18.902\n10.084\n191.685\n67.410\n2717.095\n3244.064\n48.389\n\n\nC1\n304.570\n300.510\n173.388\n5.293\n148.321\n53.500\n1807.191\n2747.520\n521.019\n\n\nHM1\n126.749\n92.684\n80.020\n0.000\n163.895\n0.000\n2163.072\n1842.670\n93.936\n\n\nHM2\n90.214\n72.580\n75.545\n0.000\n130.676\n0.000\n3434.170\n3433.543\n194.084\n\n\nHM3\n114.224\n79.751\n239.901\n0.000\n0.000\n28.050\n1649.797\n1678.069\n334.678\n\n\nHM4\n132.318\n107.964\n155.655\n3.612\n5.265\n18.105\n3390.124\n3088.125\n373.427\n\n\nHM5\n68.657\n49.695\n12.045\n0.000\n112.351\n0.000\n3148.633\n3153.588\n172.843\n\n\nHM6\n112.428\n57.860\n52.582\n0.000\n0.000\n0.000\n3088.206\n4084.593\n183.157\n\n\nP2\n194.675\n145.165\n63.666\n12.729\n18.287\n89.610\n2474.794\n2692.826\n880.425\n\n\nC2\n401.575\n564.465\n305.068\n42.442\n17.261\n84.509\n1635.162\n1030.576\n255.938\n\n\nIF1\n174.037\n130.035\n38.956\n0.000\n105.243\n3.978\n2013.397\n1678.351\n49.232\n\n\nIF2\n126.663\n115.666\n76.857\n0.000\n63.294\n4.975\n3399.788\n1727.786\n116.573\n\n\nIF3\n141.120\n53.064\n182.891\n4.574\n0.000\n12.948\n3766.222\n504.454\n38.554\n\n\nIF4\n132.275\n78.283\n18.266\n9.628\n154.257\n0.000\n3705.406\n2293.403\n222.193\n\n\nIF5\n111.800\n91.316\n82.741\n0.000\n223.890\n4.293\n3228.713\n2499.064\n103.378\n\n\nIF6\n159.411\n120.352\n31.099\n0.000\n5.171\n0.000\n2001.489\n2659.008\n173.974\n\n\n\n\n\nI am adding in my DATA DICTIONARY from Assignment 2:"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#data-dictionary",
    "href": "posts/Assignment 4/Assignment4.html#data-dictionary",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "Just one excel sheet with items and attributes.\n\n\n\nIn Cytokine_summary, there are 16 pigs. P1 and P2 were pilot pigs fed piglet milk replacer formula. C1 and C2 were farm control pigs (siblings) raised at a farm (the same one as the other pigs), feeding from their own mom, and then we received them for necropsy on day of life (DOL) 28. HM1-6 were fed human milk for 28 days in our lab. IF1-6 were fed infant formula for 28 days in our lab. Pairs of HM and IF (such as HM1 and IF1) were siblings and both raised at the same time, but in different cages.\n\n\n\nIn Cytokine_summary, there are 10 variables. One of these columns = “Pigs” and specifies the observations described above. All other variables are cytokine values from ELISAs on various intestinal tissues harvested fromt the pigs at necropsy on DOL 28 (except HM/IF5- they had to stay with us a little longer). Detected ELISAs tested included IL1B, TNFA, and IL8. Each of these cytokines were tested on the jejunum (Jej), ileum (Ile), and Colon (Col) of each pig. Concentration units of for each measurement were in pg/mL."
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#load-libraries",
    "href": "posts/Assignment 4/Assignment4.html#load-libraries",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "Now that I have the necessary data and packages, I want to make a box blot distribution of my various cytokines per pig feeding group - HM, IF, P, and C. Barrie helped me with this!"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#organize-the-data",
    "href": "posts/Assignment 4/Assignment4.html#organize-the-data",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "Here we add another column into Cytokine_summary via R"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#what-does-each-diet-look-like",
    "href": "posts/Assignment 4/Assignment4.html#what-does-each-diet-look-like",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "Figure 1. Box and whisker plots displaying piglet diet group differences in expression levels (pg/mL) of the pro-inflammatory cytokine IL1B in the jejunum. Jitter overlay is representative of each individual pig.\n\n\nC = Farm Control\nHM = HM\nIF = IF\nP = Lab Control\nNow I could create individual ones of these for each column… but we are going to try to work smarter, not harder, and create a new data frame to get all these types of plots into 1 figure."
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#creating-9-plots-in-1-figure",
    "href": "posts/Assignment 4/Assignment4.html#creating-9-plots-in-1-figure",
    "title": "BCB 520 Assignment 4",
    "section": "",
    "text": "First we break up the columns 2-10 to their cytokine and their region.\nCytokine_long looks good!\nNow to put that into a boxplot with jitter overlay. We facet_wrapped in order to make subplots from 1 plot (slice it up for the viewers).\n\n\n\n\n\nFigure 2. Box and whisker plots displaying piglet diet group differences in expression levels (pg/mL) of the pro-inflammatory cytokines IL1B, IL8, and TNFA in the jejunum, ileum, and colon. Jitter overlay is representative of each individual pig.\nGreat!"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#plot-looking-at-individual-pigs-and-cytokine-z-scores",
    "href": "posts/Assignment 4/Assignment4.html#plot-looking-at-individual-pigs-and-cytokine-z-scores",
    "title": "BCB 520 Assignment 4",
    "section": "Plot looking at individual pigs and cytokine z scores",
    "text": "Plot looking at individual pigs and cytokine z scores\nMake new data frame for Cytokine z-scores\nMake a boxplot now:\n\n\n\n\n\nFigure 3. Box and whisker plots of individual pigs and their overall cytokine expression z scores. Colors represent respective cytokines.\nSuper cool! Each pig has 9 dots = 9 cytokines readings (3 cytokines and 3 regions). Doesn’t appear to be any real outlier pigs as a whole (i.e. none are extremely inflamed or non-inflamed for any measure). This shows us there doesn’t appear to be hidden structure in my data.\nACTION = SEARCH\nTARGET = ALL DATA"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#now-for-manipulating",
    "href": "posts/Assignment 4/Assignment4.html#now-for-manipulating",
    "title": "BCB 520 Assignment 4",
    "section": "Now for manipulating…",
    "text": "Now for manipulating…\nWhat if I add the CHANNEL of another dimension of FILL/COLOR to Figure 3?\n\n\n\n\n\nFigure 4. Box and whisker plots of individual pigs and their overall cytokine expression z scores. Colors represent respective cytokines and respective regions.\nActually, this might be quite helpful! Hmm… different colors?\n\n\n\n\n\nFigure 5. Box and whisker plots of individual pigs and their overall cytokine expression z scores. Colors represent respective cytokines and respective regions.\nHelpful or a hindrance, I don’t know!\nHow about changing the MARK of SHAPE?\n\n\n\n\n\nFigure 6. Box and whisker plots of individual pigs and their overall cytokine expression z scores. Colors represent respective cytokines and respective regions.\nAlright… I am having too much fun here. Lastly, for my micro-pig-ome data, Barrie and I worked on relative abundance stacked barcharts. I won’t go into it too much, but the data I am importing below are microbiome samples (from piglet fecal samples) representative of various timepoints. I want to manipulate the CHANNEL of COLOR to be a little more discriminating.\nThe following was copied from my pre_decontam project:\n\n\n\n\n\n\n\n\nFigure 7. Piglet microbiome relative abundances with poor color\nI am going to manipulate color now!\n\n\n\n\n\nFigure 7. Piglet microbiome relative abundances with better color!"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#expressiveness-and-effectiveness",
    "href": "posts/Assignment 4/Assignment4.html#expressiveness-and-effectiveness",
    "title": "BCB 520 Assignment 4",
    "section": "Expressiveness and Effectiveness",
    "text": "Expressiveness and Effectiveness\nShow by Figures 3, 4, 5, and 6.\nFigure 3 and 5 = best, 4 and 6 = meh!"
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#discriminability",
    "href": "posts/Assignment 4/Assignment4.html#discriminability",
    "title": "BCB 520 Assignment 4",
    "section": "Discriminability",
    "text": "Discriminability\nFigure 4 fine-tuned Figure 3 by GI region.\nHowever, Figure 5 tried to add in more colors, and ultimately, this just added to the cognitive load. Not sure how to use Region helpfully without overstimulating/confusing."
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#separability",
    "href": "posts/Assignment 4/Assignment4.html#separability",
    "title": "BCB 520 Assignment 4",
    "section": "Separability",
    "text": "Separability\nHead to Figure 7. Gut microbiome stacked barcharts are a little easier to distinguish with the updated color scheme."
  },
  {
    "objectID": "posts/Assignment 4/Assignment4.html#popout",
    "href": "posts/Assignment 4/Assignment4.html#popout",
    "title": "BCB 520 Assignment 4",
    "section": "Popout",
    "text": "Popout\nWe were searching for popout in Figure 3. I do notice C2 is a bit of a bigger box compared to the rest.\nThanks! TTFN!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Heidi",
    "section": "",
    "text": "About this blog: My name is Heidi Sellmann and this is my BCB 520 Portfolio!"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Heidi",
    "section": "Education",
    "text": "Education\nUniversity of Idaho | Moscow, ID MS in Nutritional Sciences | 2022-2024\nLewis-Clark State Colleg | Lewiston, ID BS in Biology | 2019 - 2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BCB520Portfolio",
    "section": "",
    "text": "Final Assignment - Polishing Up My Figures\n\n\n\nPortfolio\n\n\nDataViz\n\n\nMicrobiome\n\n\nBar charts\n\n\nAssignment\n\n\n\nMissing data is not meaningless!\n\n\n\nHeidi Sellmann\n\n\nApr 27, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNETWORKS IN OBSERVABLE\n\n\n\nPortfolio\n\n\nDataViz\n\n\nNetwork\n\n\nObservable\n\n\nAssignment\n\n\n\nCool!\n\n\n\nHeidi Sellmann\n\n\nApr 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPractice with Network Data\n\n\n\nPortfolio\n\n\nDataViz\n\n\nNetwork\n\n\niGraph\n\n\nAssignment\n\n\n\niGRAPH!\n\n\n\nHeidi Sellmann\n\n\nApr 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBCB 520 - Midterm Portfolio Post\n\n\n\nAssignment\n\n\nDataViz\n\n\nTables\n\n\nProject\n\n\n\nGrants and awards and bears, oh my!\n\n\n\nHeidi Sellmann\n\n\nMar 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBCB 520 Assignment 5\n\n\n\nAssignments\n\n\nData Viz\n\n\nTables\n\n\nScatterplot\n\n\nBarplot\n\n\nPiechart\n\n\n\nWas the trade worth it?\n\n\n\nHeidi Sellmann\n\n\nFeb 24, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBCB 520 Assignment 4\n\n\n\nAssignments\n\n\nData Viz\n\n\n\nMy Cytoswine and micro-pig-ome data\n\n\n\nHeidi Sellmann\n\n\nFeb 8, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nWelcome\n\n\n\n\n\n\n\nHeidi Sellmann\n\n\nFeb 3, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html",
    "title": "BCB 520 Assignment 5",
    "section": "",
    "text": "Codeknitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE)"
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#overview",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#overview",
    "title": "BCB 520 Assignment 5",
    "section": "OVERVIEW",
    "text": "OVERVIEW\nIn this assignment, we are going to practice creating visualizations for tabular data where everyone will engage in the same logic process and have the same design objectives in mind."
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#learning-objectives",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#learning-objectives",
    "title": "BCB 520 Assignment 5",
    "section": "LEARNING OBJECTIVES",
    "text": "LEARNING OBJECTIVES\n\nDemonstrate that you can manipulate tabular data to facilitate different visualization tasks. The minimum skills are FILTERING, SELECTING, and SUMMARIZING, all while GROUPING these operations as dictated by your data.\nDemonstrate that you can use tabular data to explore, analyze, and choose the most appropriate visualization idioms given a specific motivating question.\nDemonstrate that you can Find, Access, and Integrate additional data in order to fully address the motivating question.\n\nThe scenario below will allow you to complete the assignment. It deals with data that are of the appropriate complexity and extent (number of observations and variables) to challenge you."
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#scenario",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#scenario",
    "title": "BCB 520 Assignment 5",
    "section": "SCENARIO",
    "text": "SCENARIO\nHockey and drafting. Was the trade worth it? Did Vancouver or Calgary “win” the trade (outlined in Assignment 5)?\nCan we make some visualizations that help us answer this question?\nIf you are solely interested in my Conclusive Figure and conclusion drawn from it, see Conclusive Figure Figure 1 for details.\n(I left fluff from the original assignment because it was helpful for me to work through.)"
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#load-librariesread-in-data",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#load-librariesread-in-data",
    "title": "BCB 520 Assignment 5",
    "section": "Load libraries/Read in data",
    "text": "Load libraries/Read in data\n\n\n\n\n\n\n\n\n\nAttribute\nType\nDescription\n\n\n\ndraftyear\nOrdinal\nCalendar year in which the player was drafted into the NHL.\n\n\nname\nItem\nFull name of the player.\n\n\nround\nOrdinal\nRound in which the player was drafted (1 to 7).\n\n\noverall\nOrdinal\nOverall draft position of the player (1 to 224)\n\n\npickinRound\nOrdinal\nPosition in which the player was drafted in their round (1 to 32).\n\n\nheight\nQuantitative\nPlayer height in inches.\n\n\nweight\nQuantitative\nPlayer weight in pounds.\n\n\nposition\nCategorical\nPlayer position (Forward, Defense, Goaltender)\n\n\nplayerId\nItem\nUnique ID (key) assigned to each player.\n\n\npostdraft\nOrdinal\nNumber of seasons since being drafted (0 to 20).\n\n\nNHLgames\nQuantitative\nNumber of games played in the NHL in that particular season (regular season is 82 games, playoffs are up to 28 more).\n\n\n\n\n\nAs Barrie states, we have a data frame with all the drafted players from 2000-2018, their position, their draft year and position, and then rows for each season since being drafted (postdraft). The key variable here is NHLgames, which tells us how many games they played in the NHL each season since being drafted. Whether drafted players even make the NHL, and how many games they play, might be a good proxy to understand the value of a draft pick we just traded away."
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#simple-scatterplot",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#simple-scatterplot",
    "title": "BCB 520 Assignment 5",
    "section": "SIMPLE SCATTERPLOT",
    "text": "SIMPLE SCATTERPLOT\nJust like many pro sports, it is pretty rare for a player to play in the NHL right after being drafted. Players get drafted when they are 18 years old, and they usually play in the juniors, minor leagues, or the NCAA to further develop.\nLet’s use a scatterplot to visualize this phenomenon with the most recent draft classes.\n\n\n\n\n\nFigure 1. Scatterplot depicting number of NHL games played after being drafted from various rounds during the year of 2022.\nMARKS = Points\nCHANNELS = Position\nKEY-VALUE PAIRS = Only values of round pick number and games played in the NHL.\nOk so this scatterplot shows that 1st round picks play the most NHL games, at least those drafted in June 2022. As round picks increase, those players often play less NHL games.\nThere are few things wrong with this visualization, however:\n\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you think of a way that adding extra channels might help?\n\nHmm… jitter?\n\n\n\n\n\nI added an additional channel/key of jitter reflecting picks in round and color showing the spectrum of picks in round… Not sure how helpful this is, but I tried!\n\n\nLabeling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualization is intended to facilitate, as well as the marks, channels, and key-value pairs used.\n\n(I added these above)\n\n\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?\n\nHmm… I am not sure. Use/add in additional/other variables, perhaps?"
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#expanded-scatterplot",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#expanded-scatterplot",
    "title": "BCB 520 Assignment 5",
    "section": "EXPANDED SCATTERPLOT",
    "text": "EXPANDED SCATTERPLOT\nThe data from the most recent drafts aren’t really helpful for our question. Let’s go back in time and use a draft year that has had some time to develop and reach their potential. How about 2018?\n\n\n\n\n\nHmmm… in addition to the problem of overplotting, we’ve got an additional issue here. We actually have two keys and one attribute. The attribute is NHLgames, and the keys are round and postdraft, but we are only using round.\n… explicitly, right? Of note, we filtered by only using the draft year of 2018 and included NHL games played up to 6 years from that draft (so 2024 if I did my math right). This makes sense- we are in the year 2024!\nAs I just touched on above, postdraft indicates the number of seasons after being drafted. We have several choices here. We can make a visualization that uses both keys, or we can somehow summarize the data for one of the keys.\nAlrighty, sounds good to me.\nFor example, let’s say we just wanted to know the TOTAL number of NHL games played since being drafted. We will make it a new variable!\n\n\n\n\n\nLook closely at the two graphs above. How are they different?\nHmm… it looks like this graph has accounted for/ordered other attributes. I am not sure exactly how though. I just notice in the code that we have grouped by playerId, round, overall, position, and name… Perhaps this is what makes the second graph seem a bit more ordered?\nFurther, we also came up with “totgames” as a sum of “NHLgames”. So if I am following, totgames = sum of NHL games played as ordered by those previous variables (playerId, round, overall, position, name)?"
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#stop-and-reflect",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#stop-and-reflect",
    "title": "BCB 520 Assignment 5",
    "section": "STOP AND REFLECT",
    "text": "STOP AND REFLECT\nWe need to think about how Barrie has been manipulating the data…\nHe says: I’m using the Tidyverse to do these manipulations. I set up the original data frame to conform to the tidy data principles (every column is a variable, every row is an observation), which is pretty much the base form of how we’ve discussed Tabular Data in class.\nI’ve snuck in some functions that have allowed me to FILTER, GROUP, and SUMMARIZE the data, often creating new dataframes as I do so. Hey, look! A handy cheatsheet for data transformation using the tidyverse!\nThese functions come from the dplyr package that gets installed as part of the tidyverse. The basic categories of actions are:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\narrange() changes the ordering of the rows.\n\nAll of these work with group_by() so you can perform whichever operation on the groups that might be present in your data set.\nOk great… I am starting to get the lingo. Earlier we did group_by() and summarise().\nLet’s get back to improving our understanding of the relative value of NHL draft picks. The figure above considers a single draft class (2018), and shows the total number of NHL games all the players have accumulated, separating each draft round on an ordinal x axis.\nGot it!\nFine, I guess, but we still have to deal with overplotting, and think about whether a scatterplot really helps us accomplish our task."
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#scatterplot-with-overall-draft-position",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#scatterplot-with-overall-draft-position",
    "title": "BCB 520 Assignment 5",
    "section": "SCATTERPLOT WITH OVERALL DRAFT POSITION",
    "text": "SCATTERPLOT WITH OVERALL DRAFT POSITION\nThis approach might yield a better match with the scatterplot idiom. What if we ignore draft round, and use the player’s overall draft position instead? It also might help us focus on our motivating question! What is the potential value of pick 31, and how does Elias Lindholm compare to that value?\nYes! We want to apply these manipulations to get a better feel for this 31st pick. And looking at this as a function of NHL games played.\n\n\n\n\n\nI took the liberty of zooming in the x axis to 0-50. After all, Elias was a 31st round pick! This allows us to see how many games other typical 31-ish picks play (at least from the 2018 draft year)."
  },
  {
    "objectID": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#scatterplot-summary",
    "href": "posts/Assignment 5 NHL Draft Analysis/Assignment 5 NHL Draft Analysis.html#scatterplot-summary",
    "title": "BCB 520 Assignment 5",
    "section": "SCATTERPLOT SUMMARY",
    "text": "SCATTERPLOT SUMMARY\nWe seem to be running into an issue in terms of overplotting. Scatterplots are great, but they work best for two quantitative attributes, and we have a situation with one or two keys and one quantitative attribute. The thing is, scatterplots can be very useful when part of our workflow involves modeling the data in some way. We’ll cover this kind of thing in future assignments, but just a bit of foreshadowing here:\n\n\n\n\n\nAdding the smoothed line doesn’t eliminate the overplotting problem, but it does indicate that it exists. We’ll cover other potential solutions (such as box plots and violin plots) to this issue later in the course, when we get to the notions of faceting and data reduction.\nWhy not include all the data? A scatter plot with that many players (4775) isn’t going to be great. But we could plot some sort of polynomial model to get a sense of the relationship between draft position and NHL games. We’ll filter to the first 8 years of their career.\nSounds good to me!\n\n\n\n\n\nOr we could visualize the average number of games played as a function of time since being drafted.\n\n\n\n\n\nI personally really like this figure. And in class we manipulated it to better answer the question of if the trade was a good trade.\nI am going to try to recreate a version of sorts of this figure above for my CONCLUSIVE FIGURE. In doing so, I will try to get back to the point of this assignment in the first place.\nI want to compare Elias himself (who’s draft data from 2013 is in the dataset) to other good players (measured by their round picked, but position specific). On the y axis, I don’t want to just look at games played, but the performance within those games. The variable “points” will be used to do this as it summarizes goals and assists- valuable player performance stats indeed, at least I would guess so for a forward!\n(As Barrie’s original hint eluded to, I am going to use the NHLdraftstats.csvdata to gather these performance measures.)\n\n\n[1] \"C:/Users/heidi/OneDrive - University of Idaho/UI Spring 2024/BCB 520 Data Vis/BCB520Portfolio/posts/Assignment 5 NHL Draft Analysis\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n…1\ndraftyear\nname\nround\noverall\npickinRound\nheight\nweight\nposition\nplayerId\npostdraft\nNHLgames\ngoals\nassists\npoints\n\n\n\n54811\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n10\n0\n0\n0\n0\n\n\n54812\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n11\n0\n0\n0\n0\n\n\n54813\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n12\n0\n0\n0\n0\n\n\n54814\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n13\n0\n0\n0\n0\n\n\n54815\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n2\n82\n11\n28\n39\n\n\n54816\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n3\n72\n11\n34\n45\n\n\n54817\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n5\n81\n27\n51\n78\n\n\n54818\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n6\n70\n29\n25\n54\n\n\n54819\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n7\n56\n19\n28\n47\n\n\n54820\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n8\n82\n42\n40\n82\n\n\n54821\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n9\n64\n18\n35\n53\n\n\n54822\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n1\n81\n17\n22\n39\n\n\n54823\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n4\n81\n16\n28\n44\n\n\n54824\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n14\n0\n0\n0\n0\n\n\n54825\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n0\n58\n9\n12\n21\n\n\n54826\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n15\n0\n0\n0\n0\n\n\n54827\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n16\n0\n0\n0\n0\n\n\n54828\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n17\n0\n0\n0\n0\n\n\n54829\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n18\n0\n0\n0\n0\n\n\n54830\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n19\n0\n0\n0\n0\n\n\n54831\n2013\nElias Lindholm\n1\n5\n5\n72\n192\nForward\n8477496\n20\n0\n0\n0\n0\n\n\n\n\n\nNow I want to look at a graph that looks at points scored over the seasons following being drafted. I like that the lines then represent various rounds from which the players were drafted.\n\n\n\n\n\nI then filtered this so that it only includes comparable players to Elias- those who are forwards and weigh between 175-220 lbs.\n\n\n\n\n\nI then added Elias’ data on top of that to see how he compares. Especially since we traded him for a future 1st round pick, this visualization helps us see how Elias and the possible/future/typical 1st round guy compare. I also changed the x axis to only include the first 10 years postdraft, especially since Elias was drafted in 2013, 10 years puts us to the current year.\n\n\n\n\nFigure 1: Conclusive Figure\n\n\n\nConclusive Figure shows average points (summarized from goals and assists) scored by players drafted from previous draft seasons who are forwards and weigh between 175-220 pounds. Colored lines indicate the average stats of those drafted from different rounds. Purple scatter points are reflective of Elias Lindholm’s performance every season since being drafted in 2013 as a 31st round draft pick."
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html",
    "title": "Practice with Network Data",
    "section": "",
    "text": "In this assignment, we’ll consider some of the tools and techniques for visualizing network data. Network data is characterized by two unique items that are not found in tabular or spatial data - Nodes and Links. In addition, there is a sub-type of network data that we will consider - Hierarchical or Tree data. Let’s practice a few visualizations to get a feel for how these things work!\nHead to Figure 1 for my final draft of our BCB520 class network data!"
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#igraph",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#igraph",
    "title": "Practice with Network Data",
    "section": "IGRAPH",
    "text": "IGRAPH\nLet’s start with igraph, which is an open source toolset for network analysis. The great thing about igraph is that you can use these tools in R, Python, Mathematica, and C++. It is very flexible and very powerful.\n\nigraph in R\nFirst up, we’ll install R/igraph and load the library (note that I’ve commented out the package installation because I’ve already installed igraph on my machine):\n\n\nCode\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n\nWarning: package 'igraph' was built under R version 4.3.2\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nNow I’m going to walk you through a modified version of the igraph tutorial, which you can find here"
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#creating-a-graph",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#creating-a-graph",
    "title": "Practice with Network Data",
    "section": "Creating a graph",
    "text": "Creating a graph\nigraph offers many ways to create a graph. The simplest one is the function make_empty_graph:\n\n\nCode\ng &lt;- make_empty_graph()\n\n\nThe most common way to create a graph is make_graph, which constructs a network based on specified edges. For example, to make a graph with 10 nodes (numbered 1 to 10) and two edges connecting nodes 1-2 and 1-5:\n\n\nCode\ng &lt;- make_graph(edges = c(1,2, 1,5), n=10, directed = FALSE)\n\n\nWe can print the graph to get a summary of its nodes and edges:\n\n\nCode\ng\n\n\nIGRAPH ec0c2d5 U--- 10 2 -- \n+ edges from ec0c2d5:\n[1] 1--2 1--5\n\n\nThis means: Undirected Named graph with 10 vertices and 2 edges, with the exact edges listed out. If the graph has a [name] attribute, it is printed as well.\n\n\n\n\n\n\nNote\n\n\n\nsummary does not list the edges, which is convenient for large graphs with millions of edges:\n\n\n\n\nCode\nsummary(g)\n\n\nIGRAPH ec0c2d5 U--- 10 2 -- \n\n\nThe same function make_graph can create some notable graphs by just specifying their name. For example you can create the graph that represents the social network of Zachary’s karate club, that shows the friendship between 34 members of a karate club at a US university in the 1970s:\n\n\nCode\ng &lt;- make_graph('Zachary')\n\n\nTo visualize a graph you can use plot:\n\n\nCode\nplot(g)"
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#vertex-and-edge-ids",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#vertex-and-edge-ids",
    "title": "Practice with Network Data",
    "section": "Vertex and edge IDs",
    "text": "Vertex and edge IDs\nVertices and edges have numerical vertex IDs in igraph. Vertex IDs are always consecutive and they start with 1. For a graph with n vertices the vertex IDs are always between 1 and n. If some operation changes the number of vertices in the graphs, e.g. a subgraph is created via induced_subgraph, then the vertices are renumbered to satisfy this criterion.\nThe same is true for the edges as well: edge IDs are always between 1 and m, the total number of edges in the graph.\nIn addition to IDs, vertices and edges can be assigned a name and other attributes. That makes it easier to track them whenever the graph is altered."
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#addingdeleting-vertices-and-edges",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#addingdeleting-vertices-and-edges",
    "title": "Practice with Network Data",
    "section": "Adding/deleting vertices and edges",
    "text": "Adding/deleting vertices and edges\nLet’s continue working with the Karate club graph. To add one or more vertices to an existing graph, use add_vertices:\n\n\nCode\ng &lt;- add_vertices(g, 3)\n\n\nSimilarly, to add edges you can use add_edges:\n\n\nCode\ng &lt;- add_edges(g, edges = c(1,35, 1,36, 34,37))\n\n\nEdges are added by specifying the source and target vertex IDs for each edge. This call added three edges, one connecting vertices 1 and 35, one connecting vertices 1 and 36, and one connecting vertices 34 and 37.\nIn addition to the add_vertices and add_edges functions, the plus operator can be used to add vertices or edges to graph. The actual operation that is performed depends on the type of the right hand side argument:\n\n\nCode\ng &lt;- g + edges(c(1,35, 1,36, 34,37))\n\n\nYou can add a single vertex/edge at a time using add_vertex and add_edge.\nLet us add some more vertices and edges to our graph. In igraph we can use the magrittr package, which provides a mechanism for chaining commands with the operator %\\&gt;%:\n\n\nCode\ng &lt;- g %&gt;% add_edges(edges=c(1,34)) %&gt;% add_vertices(3) %&gt;%\n     add_edges(edges=c(38,39, 39,40, 40,38, 40,37))\ng\n\n\nIGRAPH ec8c078 U--- 40 86 -- Zachary\n+ attr: name (g/c)\n+ edges from ec8c078:\n [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  1-- 7  1-- 8  1-- 9  1--11  1--12\n[11]  1--13  1--14  1--18  1--20  1--22  1--32  2-- 3  2-- 4  2-- 8  2--14\n[21]  2--18  2--20  2--22  2--31  3-- 4  3-- 8  3--28  3--29  3--33  3--10\n[31]  3-- 9  3--14  4-- 8  4--13  4--14  5-- 7  5--11  6-- 7  6--11  6--17\n[41]  7--17  9--31  9--33  9--34 10--34 14--34 15--33 15--34 16--33 16--34\n[51] 19--33 19--34 20--34 21--33 21--34 23--33 23--34 24--26 24--28 24--33\n[61] 24--34 24--30 25--26 25--28 25--32 26--32 27--30 27--34 28--34 29--32\n[71] 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34  1--35  1--36\n+ ... omitted several edges\n\n\nCode\nplot(g)\n\n\n\n\n\nWe now have an undirected graph with 40 vertices and 86 edges. Vertex and edge IDs are always contiguous, so if you delete a vertex all subsequent vertices will be renumbered. When a vertex is renumbered, edges are not renumbered, but their source and target vertices will be. Use delete_vertices and delete_edges to perform these operations. For instance, to delete the edge connecting vertices 1-34, get its ID and then delete it:\n\n\nCode\nget.edge.ids(g, c(1,34))\n\n\n[1] 82\n\n\n\n\nCode\ng &lt;- delete_edges(g, 82)\n\n\nAs an example, to create a broken ring:\n\n\nCode\ng &lt;- make_ring(10) %&gt;% delete_edges(\"10|1\")\nplot(g)\n\n\n\n\n\nThe example above shows that you can also refer to edges with strings containing the IDs of the source and target vertices, connected by a pipe symbol |. \"10|1\" in the above example means the edge that connects vertex 10 to vertex 1. Of course you can also use the edge IDs directly, or retrieve them with the get.edge.ids function:\n\n\nCode\ng &lt;- make_ring(5)\ng &lt;- delete_edges(g, get.edge.ids(g, c(1,5, 4,5)))\nplot(g)"
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#constructing-graphs",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#constructing-graphs",
    "title": "Practice with Network Data",
    "section": "Constructing graphs",
    "text": "Constructing graphs\nIn addition to make_empty_graph, make_graph, and make_graph_from_literal, igraph includes many other function to construct a graph. Some are deterministic, i.e. they produce the same graph each single time, e.g. make_tree:\n\n\nCode\ngraph1 &lt;- make_tree(127, 2, mode = \"undirected\")\nsummary(graph1)\n\n\nIGRAPH ed2c122 U--- 127 126 -- Tree\n+ attr: name (g/c), children (g/n), mode (g/c)\n\n\nCode\nplot(graph1)\n\n\n\n\n\nThis generates a regular tree graph with 127 vertices, each vertex having two children. No matter how many times you call make_tree, the generated graph will always be the same if you use the same parameters:\n\n\nCode\ngraph2 &lt;- make_tree(127, 2, mode = \"undirected\")\n\n\n\n\nCode\nidentical_graphs(graph1,graph2)\n\n\n[1] TRUE\n\n\nOther functions generate graphs stochastically, i.e. they produce a different graph each time. For instance sample_grg:\n\n\nCode\ngraph1 &lt;- sample_grg(100, 0.2)\nsummary(graph1)\n\n\nIGRAPH eda13bb U--- 100 507 -- Geometric random graph\n+ attr: name (g/c), radius (g/n), torus (g/l)\n\n\nCode\nplot(graph1)\n\n\n\n\n\nThis generates a geometric random graph: n points are chosen randomly and uniformly inside the unit square and pairs of points closer to each other than a predefined distance d are connected by an edge. If you generate GRGs with the same parameters, they will be different:\n\n\nCode\ngraph2 &lt;- sample_grg(100, 0.2)\nidentical_graphs(graph1, graph2)\n\n\n[1] FALSE\n\n\nCode\nplot(graph2)\n\n\n\n\n\nA slightly looser way to check if the graphs are equivalent is via isomorphic. Two graphs are said to be isomorphic if they have the same number of components (vertices and edges) and maintain a one-to-one correspondence between vertices and edges, i.e., they are connected in the same way.\n\n\nCode\nisomorphic(graph1, graph2)\n\n\n[1] FALSE\n\n\nChecking for isomorphism can take a while for large graphs (in this case, the answer can quickly be given by checking the degree sequence of the two graphs). identical_graph is a stricter criterion than isomorphic: the two graphs must have the same list of vertices and edges, in exactly the same order, with same directedness, and the two graphs must also have identical graph, vertex and edge attributes."
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#setting-and-retrieving-attributes",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#setting-and-retrieving-attributes",
    "title": "Practice with Network Data",
    "section": "Setting and retrieving attributes",
    "text": "Setting and retrieving attributes\nIn addition to IDs, vertex and edges can have attributes such as a name, coordinates for plotting, metadata, and weights. The graph itself can have such attributes too (e.g. a name, which will show in summary). In a sense, every graph, vertex and edge can be used as an R namespace to store and retrieve these attributes.\nTo demonstrate the use of attributes, let us create a simple social network:\n\n\nCode\ng &lt;- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,\n                George-Dennis:Frank, Dennis-Esther)\n\n\nEach vertex represents a person, so we want to store ages, genders and types of connection between two people (is_formal refers to whether a connection between one person or another is formal or informal, i.e. colleagues or friends). The \\$ operator is a shortcut to get and set graph attributes. It is shorter and just as readable as graph_attr and set_graph_attr.\n\n\nCode\nV(g)$age &lt;- c(25, 31, 18, 23, 47, 22, 50) \nV(g)$gender &lt;- c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")\nE(g)$is_formal &lt;- c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)\nsummary(g)\n\n\nIGRAPH ee69246 UN-- 7 9 -- \n+ attr: name (v/c), age (v/n), gender (v/c), is_formal (e/l)\n\n\nV and E are the standard way to obtain a sequence of all vertices and edges, respectively. This assigns an attribute to all vertices/edges at once. Another way to generate our social network is with the use of set_vertex_attr and set_edge_attr and the operator %\\&gt;%:\n\n\nCode\ng &lt;- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,\n                George-Dennis:Frank, Dennis-Esther) %&gt;%\n  set_vertex_attr(\"age\", value = c(25, 31, 18, 23, 47, 22, 50)) %&gt;%\n  set_vertex_attr(\"gender\", value = c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")) %&gt;%\n  set_edge_attr(\"is_formal\", value = c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE))\nsummary(g)\n\n\nTo assign or modify an attribute for a single vertex/edge:\n\n\nCode\nE(g)$is_formal\n\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\nCode\nE(g)$is_formal[1] &lt;- TRUE\nE(g)$is_formal\n\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\nAttribute values can be set to any R object, but note that storing the graph in some file formats might result in the loss of complex attribute values. Vertices, edges and the graph itself can all be used to set attributes, e.g. to add a date to the graph:\n\n\nCode\ng$date &lt;- c(\"2022-02-11\")\ngraph_attr(g, \"date\")\n\n\n[1] \"2022-02-11\"\n\n\nTo retrieve attributes, you can also use graph_attr, vertex_attr, and edge_attr. To find the ID of a vertex you can use the function match:\n\n\nCode\nmatch(c(\"George\"), V(g)$name)\n\n\n[1] 7\n\n\nTo assign attributes to a subset of vertices or edges, you can use:\n\n\nCode\nV(g)$name[1:3] &lt;- c(\"Alejandra\", \"Bruno\", \"Carmina\")\nV(g)\n\n\n+ 7/7 vertices, named, from ee69246:\n[1] Alejandra Bruno     Carmina   Frank     Dennis    Esther    George   \n\n\nTo delete attributes:\n\n\nCode\ng &lt;- delete_vertex_attr(g, \"gender\")\nV(g)$gender\n\n\nNULL\n\n\nIf you want to save a graph in R with all the attributes use the R’s standard function dput function and retrieve it later with dget. You can also just save the R workspace and restore it later."
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#structural-properties-of-graphs",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#structural-properties-of-graphs",
    "title": "Practice with Network Data",
    "section": "Structural properties of graphs",
    "text": "Structural properties of graphs\nigraph provides a large set of functions to calculate various structural properties of graphs. It is beyond the scope of this tutorial to document all of them, hence this section will only introduce a few of them for illustrative purposes. We will work on the small social network constructed in the previous section.\nPerhaps the simplest property one can think of is the degree. The degree of a vertex equals the number of edges adjacent to it. In case of directed networks, we can also define in-degree (the number of edges pointing towards the vertex) and out-degree (the number of edges originating from the vertex). igraph is able to calculate all of them using a simple syntax:\n\n\nCode\ndegree(g)\n\n\nAlejandra     Bruno   Carmina     Frank    Dennis    Esther    George \n        3         1         4         3         3         2         2 \n\n\nIf the graph was directed, we would have been able to calculate the in- and out-degrees separately using degree(mode=\"in\") and degree(mode=\"out\"). You can also pass a single vertex ID or a list of vertex IDs to degree if you want to calculate the degrees for only a subset of vertices:\n\n\nCode\ndegree(g, 7)\n\n\nGeorge \n     2 \n\n\n\n\nCode\ndegree(g, v=c(3,4,5))\n\n\nCarmina   Frank  Dennis \n      4       3       3 \n\n\nMost functions that accept vertex IDs also accept vertex names (i.e. the values of the name vertex attribute) as long as the names are unique:\n\n\nCode\ndegree(g, v=c(\"Carmina\", \"Frank\", \"Dennis\"))\n\n\nCarmina   Frank  Dennis \n      4       3       3 \n\n\nIt also works for single vertices:\n\n\nCode\ndegree(g, \"Bruno\")\n\n\nBruno \n    1 \n\n\nA similar syntax is used for most of the structural properties igraph can calculate. For vertex properties, the functions accept a vertex ID, a vertex name, or a list of vertex IDs or names (and if they are omitted, the default is the set of all vertices). For edge properties, the functions accept a single edge ID or a list of edge IDs.\n\nNOTE: For some measures, it does not make sense to calculate them only for a few vertices or edges instead of the whole graph, as it would take the same time anyway. In this case, the functions won’t accept vertex or edge IDs, but you can still restrict the resulting list later using standard operations. One such example is eigenvector centrality (evcent()).\n\nBesides degree, igraph includes built-in routines to calculate many other centrality properties, including vertex and edge betweenness (edge_betweenness) or Google’s PageRank (page_rank) just to name a few. Here we just illustrate edge betweenness:\n\n\nCode\nedge_betweenness(g)\n\n\n[1] 6 6 4 3 4 4 4 2 3\n\n\nNow we can also figure out which connections have the highest betweenness centrality:\n\n\nCode\nebs &lt;- edge_betweenness(g)\nas_edgelist(g)[ebs == max(ebs), ]\n\n\n     [,1]        [,2]     \n[1,] \"Alejandra\" \"Bruno\"  \n[2,] \"Alejandra\" \"Carmina\""
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#querying-vertices-and-edges-based-on-attributes",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#querying-vertices-and-edges-based-on-attributes",
    "title": "Practice with Network Data",
    "section": "Querying vertices and edges based on attributes",
    "text": "Querying vertices and edges based on attributes\n\nSelecting vertices\nImagine that in a given social network, you want to find out who has the largest degree. You can do that with the tools presented so far and the which.max function:\n\n\nCode\nwhich.max(degree(g))\n\n\nCarmina \n      3 \n\n\nAnother example would be to select only vertices that have only odd IDs but not even ones, using the V function:\n\n\nCode\ngraph &lt;- graph.full(n=10)\nonly_odd_vertices &lt;- which(V(graph)%%2==1)\nlength(only_odd_vertices)\n\n\n[1] 5\n\n\nOf course, it is possible to select vertices or edges by positional indices:\n\n\nCode\nseq &lt;- V(graph)[2, 3, 7]\nseq\n\n\n+ 3/10 vertices, from ef2caa2:\n[1] 2 3 7\n\n\n\n\nCode\nseq &lt;- seq[1, 3]    # filtering an existing vertex set\nseq\n\n\n+ 2/10 vertices, from ef2caa2:\n[1] 2 7\n\n\nSelecting a vertex that does not exist results in an error:\n\n\nCode\nseq &lt;- V(graph)[2, 3, 7, \"foo\", 3.5]\n## Error in simple_vs_index(x, ii, na_ok) : Unknown vertex selected\n\n\nAttribute names can also be used as-is within the indexing brackets of V() and E(). This can be combined with R’s ability to use boolean vectors for indexing to obtain very concise and readable expressions to retrieve a subset of the vertex or edge set of a graph. For instance, the following command gives you the names of the individuals younger than 30 years in our social network:\n\n\nCode\nV(g)[age &lt; 30]$name\n\n\n[1] \"Alejandra\" \"Carmina\"   \"Frank\"     \"Esther\"   \n\n\nOf course, &lt; is not the only boolean operator that can be used for this. Other possibilities include the following:\n\n\n\n\n\n\n\nOperator\nMeaning\n\n\n\n\n==\nThe attribute/property value must be equal to\n\n\n!=\nThe attribute/property value must not be equal to\n\n\n&lt;\nThe attribute/property value must be less than\n\n\n&lt;=\nThe attribute/property value must be less than or equal to\n\n\n&gt;\nThe attribute/property value must be greater than\n\n\n&gt;=\nThe attribute/property value must be greater than or equal to\n\n\n%in%\nThe attribute/property value must be included in\n\n\n\nYou can also create a “not in” operator from %in% using the Negate function:\n\n\nCode\n`%notin%` &lt;- Negate(`%in%`)\n\n\nIf an attribute has the same name as an igraph function, you should be careful as the syntax can become a little confusing. For instance, if there is an attribute named degree that represents the grades of an exam for each person, that should not be confused with the igraph function that computes the degrees of vertices in a network sense:\n\n\nCode\nV(g)$degree &lt;- c(\"A\", \"B\", \"B+\", \"A+\", \"C\", \"A\", \"B\")\nV(g)$degree[degree(g) == 3]\n\n\n[1] \"A\"  \"A+\" \"C\" \n\n\n\n\nCode\nV(g)$name[degree(g) == 3]\n\n\n[1] \"Alejandra\" \"Frank\"     \"Dennis\"   \n\n\n\n\nSelecting edges\nEdges can be selected based on attributes just like vertices. As mentioned above, the standard way to get edges is E. Moreover, there are a few special structural properties for selecting edges.\nUsing .from allows you to filter the edge sequence based on the source vertices of the edges. E.g., to select all the edges originating from Carmina (who has vertex index 3):\n\n\nCode\nE(g)[.from(3)]\n\n\n+ 4/9 edges from ee69246 (vertex names):\n[1] Alejandra--Carmina Carmina  --Frank   Carmina  --Dennis  Carmina  --Esther \n\n\nOf course it also works with vertex names:\n\n\nCode\nE(g)[.from(\"Carmina\")]\n\n\n+ 4/9 edges from ee69246 (vertex names):\n[1] Alejandra--Carmina Carmina  --Frank   Carmina  --Dennis  Carmina  --Esther \n\n\nUsing .to filters edge sequences based on the target vertices. This is different from .from if the graph is directed, while it gives the same answer for undirected graphs. Using .inc selects only those edges that are incident on a single vertex or at least one of the vertices, irrespectively of the edge directions.\nThe %--% operator can be used to select edges between specific groups of vertices, ignoring edge directions in directed graphs. For instance, the following expression selects all the edges between Carmina (vertex index 3), Dennis (vertex index 5) and Esther (vertex index 6):\n\n\nCode\nE(g) [ 3:5 %--% 5:6 ]\n\n\n+ 3/9 edges from ee69246 (vertex names):\n[1] Carmina--Dennis Carmina--Esther Dennis --Esther\n\n\nTo make the %--% operator work with names, you can build string vectors containing the names and then use these vectors as operands. For instance, to select all the edges that connect men to women, we can do the following after re-adding the gender attribute that we deleted earlier:\n\n\nCode\nV(g)$gender &lt;- c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")\n\n\n\n\nCode\nmen &lt;- V(g)[gender == \"m\"]$name\nmen\n\n\n[1] \"Bruno\"  \"Frank\"  \"Dennis\" \"George\"\n\n\n\n\nCode\nwomen &lt;- V(g)[gender == \"f\"]$name\nwomen\n\n\n[1] \"Alejandra\" \"Carmina\"   \"Esther\"   \n\n\n\n\nCode\nE(g)[men %--% women]\n\n\n+ 5/9 edges from ee69246 (vertex names):\n[1] Alejandra--Bruno  Alejandra--Frank  Carmina  --Frank  Carmina  --Dennis\n[5] Dennis   --Esther"
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#treating-a-graph-as-an-adjacency-matrix",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#treating-a-graph-as-an-adjacency-matrix",
    "title": "Practice with Network Data",
    "section": "Treating a graph as an adjacency matrix",
    "text": "Treating a graph as an adjacency matrix\nThe adjacency matrix is another way to represent a graph. In an adjacency matrix, rows and columns are labeled by graph vertices, and the elements of the matrix indicate the number of edges between vertices i and j. The adjacency matrix for the example graph is:\n\n\nCode\nas_adjacency_matrix(g)\n\n\n7 x 7 sparse Matrix of class \"dgCMatrix\"\n          Alejandra Bruno Carmina Frank Dennis Esther George\nAlejandra         .     1       1     1      .      .      .\nBruno             1     .       .     .      .      .      .\nCarmina           1     .       .     1      1      1      .\nFrank             1     .       1     .      .      .      1\nDennis            .     .       1     .      .      1      1\nEsther            .     .       1     .      1      .      .\nGeorge            .     .       .     1      1      .      .\n\n\nFor example, Carmina (1, 0, 0, 1, 1, 1, 0) is directly connected to Alejandra (who has vertex index 1), Frank (index 4), Dennis (index 5) and Esther (index 6), but not to Bruno (index 2) or to George (index 7)."
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#layouts-and-plotting",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#layouts-and-plotting",
    "title": "Practice with Network Data",
    "section": "Layouts and plotting",
    "text": "Layouts and plotting\nA graph is an abstract mathematical object without a specific representation in 2D, 3D or any other geometric space. This means that whenever we want to visualise a graph, we have to find a mapping from vertices to coordinates in two- or three-dimensional space first, preferably in a way that is useful and/or pleasing for the eye. A separate branch of graph theory, namely graph drawing, tries to solve this problem via several graph layout algorithms. igraph implements quite a few layout algorithms and is also able to draw them onto the screen or to any output format that R itself supports.\n\nLayout algorithms\nThe layout functions in igraph always start with layout. The following table summarises them:\n\n\n\n\n\n\n\nMethod name\nAlgorithm description\n\n\n\n\nlayout_randomly\nPlaces the vertices completely randomly\n\n\nlayout_in_circle\nDeterministic layout that places the vertices on a circle\n\n\nlayout_on_sphere\nDeterministic layout that places the vertices evenly on the surface of a sphere\n\n\nlayout_with_drl\nThe Drl (Distributed Recursive Layout) algorithm for large graphs\n\n\nlayout_with_fr\nFruchterman-Reingold force-directed algorithm\n\n\nlayout_with_kk\nKamada-Kawai force-directed algorithm\n\n\nlayout_with_lgl\nThe LGL (Large Graph Layout) algorithm for large graphs\n\n\nlayout_as_tree\nReingold-Tilford tree layout, useful for (almost) tree-like graphs\n\n\nlayout_nicely\nLayout algorithm that automatically picks one of the other algorithms based on certain properties of the graph\n\n\n\nLayout algorithms can be called directly with a graph as its first argument. They will return a matrix with two columns and as many rows as the number of vertices in the graph; each row will correspond to the position of a single vertex, ordered by vertex IDs. Some algorithms have a 3D variant; in this case they return three columns instead of 2.\n\n\nCode\nlayout &lt;- layout_with_kk(g)\n\n\nSome layout algorithms take additional arguments; e.g., when laying out a graph as a tree, it might make sense to specify which vertex is to be placed at the root of the layout:\n\n\nCode\nlayout &lt;- layout_as_tree(g, root = 2)\n\n\n\n\nDrawing a graph using a layout\nWe can plot our imaginary social network with the Kamada-Kawai layout algorithm as follows:\n\n\nCode\nlayout &lt;- layout_with_kk(g)\n\n\n\n\nCode\nplot(g, layout = layout, main = \"Social network with the Kamada-Kawai layout algorithm\")\n\n\n\n\n\nThis should open a new window showing a visual representation of the network. Remember that the exact placement of nodes may be different on your machine since the layout is not deterministic.\nThe layout argument also accepts functions; in this case, the function will be called with the graph as its first argument. This makes it possible to just pass the name of a layout function directly, without creating a layout variable:\n\n\nCode\nplot(g, layout = layout_with_fr,\n     main = \"Social network with the Fruchterman-Reingold layout algorithm\")\n\n\n\n\n\nTo improve the visuals, a trivial addition would be to color the vertices according to the gender. We should also try to place the labels slightly outside the vertices to improve readability:\n\n\nCode\nV(g)$color &lt;- ifelse(V(g)$gender == \"m\", \"yellow\", \"red\")\nplot(g, layout = layout, vertex.label.dist = 3.5,\n     main = \"Social network - with genders as colors\")\n\n\n\n\n\nYou can also treat the gender attribute as a factor and provide the colors with an argument to plot(), which takes precedence over the color vertex attribute. Colors will be assigned automatically to levels of a factor:\n\n\nCode\nplot(g, layout=layout, vertex.label.dist=3.5, vertex.color=as.factor(V(g)$gender))\n\n\n\n\n\nAs seen above with the vertex.color argument, you can specify visual properties as arguments to plot instead of using vertex or edge attributes. The following plot shows the formal ties with thick lines while informal ones with thin lines:\n\n\nCode\nplot(g, layout=layout, vertex.label.dist=3.5, vertex.size=20,\n     vertex.color=ifelse(V(g)$gender == \"m\", \"yellow\", \"red\"),\n     edge.width=ifelse(E(g)$is_formal, 5, 1))\n\n\n\n\n\nThis latter approach is preferred if you want to keep the properties of the visual representation of your graph separate from the graph itself.\nIn summary, there are special vertex and edge properties that correspond to the visual representation of the graph. These attributes override the default settings of igraph (i.e color, weight, name, shape,layout,etc.). The following two tables summarise the most frequently used visual attributes for vertices and edges, respectively:\n\n\nVertex attributes controlling graph plots\n\n\n\n\n\n\n\n\nAttribute name\nKeyword argument\nPurpose\n\n\n\n\ncolor\nvertex.color\nColor of the vertex\n\n\nlabel\nvertex.label\nLabel of the vertex. They will be converted to character. Specify NA to omit vertex labels. The default vertex labels are the vertex ids.\n\n\nlabel.cex\nvertex.label.cex\nFont size of the vertex label, interpreted as a multiplicative factor, similarly to R’s text function\n\n\nlabel.color\nvertex.label.color\nColor of the vertex label\n\n\nlabel.degree\nvertex.label.degree\nIt defines the position of the vertex labels, relative to the center of the vertices. It is interpreted as an angle in radian, zero means ‘to the right’, and ‘pi’ means to the left, up is -pi/2 and down is pi/2. The default value is -pi/4\n\n\nlabel.dist\nvertex.label.dist\nDistance of the vertex label from the vertex itself, relative to the vertex size\n\n\nlabel.family\nvertex.label.family\nFont family of the vertex, similarly to R’s text function\n\n\nlabel.font\nvertex.label.font\nFont within the font family of the vertex, similarly to R’s text function\n\n\nshape\nvertex.shape\nThe shape of the vertex, currently “circle”, “square”, “csquare”, “rectangle”, “crectangle”, “vrectangle”, “pie” (see vertex.shape.pie), ‘sphere’, and “none” are supported, and only by the plot.igraph command.\n\n\nsize\nvertex.size\nThe size of the vertex, a numeric scalar or vector, in the latter case each vertex sizes may differ\n\n\n\n\n\nEdge attributes controlling graph plots\n\n\n\n\n\n\n\n\nAttribute name\nKeyword argument\nPurpose\n\n\n\n\ncolor\nedge.color\nColor of the edge\n\n\ncurved\nedge.curved\nA numeric value specifies the curvature of the edge; zero curvature means straight edges, negative values means the edge bends clockwise, positive values the opposite. TRUE means curvature 0.5, FALSE means curvature zero\n\n\narrow.size\nedge.arrow.size\nCurrently this is a constant, so it is the same for every edge. If a vector is submitted then only the first element is used, ie. if this is taken from an edge attribute then only the attribute of the first edge is used for all arrows.\n\n\narrow.width\nedge.arrow.width\nThe width of the arrows. Currently this is a constant, so it is the same for every edge\n\n\nwidth\nedge.width\nWidth of the edge in pixels\n\n\nlabel\nedge.label\nIf specified, it adds a label to the edge.\n\n\nlabel.cex\nedge.label.cex\nFont size of the edge label, interpreted as a multiplicative factor, similarly to R’s text function\n\n\nlabel.color\nedge.label.color\nColor of the edge label\n\n\nlabel.family\nedge.label.family\nFont family of the edge, similarly to R’s text function\n\n\nlabel.font\nedge.label.font\nFont within the font family of the edge, similarly to R’s text function\n\n\n\n\n\nGeneric arguments of plot()\nThese settings can be specified as arguments to the plot function to control the overall appearance of the plot.\n\n\n\n\n\n\n\nKeyword argument\nPurpose\n\n\n\n\nlayout\nThe layout to be used. It can be an instance of Layout, a list of tuples containing X-Y coordinates, or the name of a layout algorithm. The default is auto, which selects a layout algorithm automatically based on the size and connectedness of the graph.\n\n\nmargin\nThe amount of empty space below, over, at the left and right of the plot, it is a numeric vector of length four."
  },
  {
    "objectID": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#assignment",
    "href": "posts/Assignment 7 Network Data/Assignment 7 Network Data.html#assignment",
    "title": "Practice with Network Data",
    "section": "ASSIGNMENT",
    "text": "ASSIGNMENT\nImprove the network above by:\n\nColoring the edges according to Advisor / BCB520 attribute.\nColoring the nodes according to Department.\nAdjusting the labels to improve readability.\nFind the best layout you can for this garbage. What a nightmare."
  },
  {
    "objectID": "posts/Assignment 9 Final/Assignment 9 Final.html",
    "href": "posts/Assignment 9 Final/Assignment 9 Final.html",
    "title": "Final Assignment - Polishing Up My Figures",
    "section": "",
    "text": "Code\nknitr::opts_chunk$set(echo=FALSE, warning=FALSE, error=FALSE, message=FALSE)"
  },
  {
    "objectID": "posts/Assignment 9 Final/Assignment 9 Final.html#what-do-you-think",
    "href": "posts/Assignment 9 Final/Assignment 9 Final.html#what-do-you-think",
    "title": "Final Assignment - Polishing Up My Figures",
    "section": "What do you think?",
    "text": "What do you think?\nBarrie pointed out that it would be helpful to display the random missing samples from my dataset. So, I added in the missing samples (originally not there) and went through the process again."
  },
  {
    "objectID": "posts/Assignment 9 Final/Assignment 9 Final.html#do-you-see-the-difference",
    "href": "posts/Assignment 9 Final/Assignment 9 Final.html#do-you-see-the-difference",
    "title": "Final Assignment - Polishing Up My Figures",
    "section": "Do you see the difference?",
    "text": "Do you see the difference?\nBarrie was right! This is easier to follow. And shocker, my advisor likes it much better too."
  }
]